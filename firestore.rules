rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is accessing their own document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function hasValidAmount() {
      return request.resource.data.amount is number 
        && request.resource.data.amount > 0;
    }

    function hasValidProvider() {
      return request.resource.data.provider in ['MTN', 'Telecel', 'AirtelTigo'];
    }

    function hasValidPhoneNumber() {
      return request.resource.data.phoneNumber is string 
        && request.resource.data.phoneNumber.matches('^[0-9]{10}$');
    }

    function hasValidStatus() {
      return request.resource.data.status in ['pending', 'completed', 'failed'];
    }
    
    // Rules for recyclers collection
    match /recyclers/{userId} {
      // Allow read if user is authenticated
      allow read: if isAuthenticated();
      
      // Allow create if user is authenticated and creating their own document
      allow create, update: if isOwner(userId) && 
        request.resource.data.uid == userId &&
        request.resource.data.email == request.auth.token.email;
      
      // Allow delete if user is authenticated and deleting their own document
      allow delete: if isOwner(userId);
    }
    
    // Rules for bins collection
    match /bins/{binId} {
      // Allow read and write if user is authenticated
      allow read, write: if isAuthenticated();
    }
    
    // Rules for bottles collection
    match /bottles/{bottleId} {
      // Allow read and write if user is authenticated
      allow read, write: if isAuthenticated();
    }
    
    // Rules for withdrawals collection
    match /withdrawals/{withdrawalId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() 
        && isOwner(request.resource.data.userId)
        && hasValidAmount()
        && hasValidProvider()
        && hasValidPhoneNumber()
        && hasValidStatus()
        && request.resource.data.timestamp is timestamp;
      
      // Only allow status updates by admin
      allow update: if false;
      allow delete: if false;
    }
    
    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 